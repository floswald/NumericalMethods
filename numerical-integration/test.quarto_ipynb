{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Numerical Integration\"\n",
        "subtitle: ScPo Computational Economics 2024\n",
        "author: Florian Oswald\n",
        "date: today\n",
        "format: \n",
        "    html:\n",
        "        code-fold: true\n",
        "        code-summary: \"Show Code\"\n",
        "        toc: true\n",
        "execute:\n",
        "    freeze: auto  # re-render only when source changes\n",
        "    echo: false\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Problem Definition\n",
        "\n",
        "We want to evaluate the potentially multidimensional definite integral\n",
        "\n",
        "$$\\begin{equation}\n",
        "I = \\int_\\Omega f(x) dx\n",
        "\\end{equation}$$\n",
        "\n",
        "where it's important to keep track of the _volume_ of the function domain, i.e. we say $\\Omega$ is a subset of $\\mathbb{R}^m$ with volume\n",
        "\n",
        "$$\\begin{equation}\n",
        "V = \\int_\\Omega dx\n",
        "\\end{equation}$$\n",
        "\n",
        "Here is an example of $f$:\n",
        "\n",
        "$$\n",
        "f(x) = \\sin(x)^2 + 0.1 x\n",
        "$$\n",
        "\n",
        "\n",
        "Let's make a plot of this, where $f$ is a black line, and the red shaded area is $I$.\n",
        "\n",
        "\n",
        "## Code Setup\n",
        "\n",
        "To run the code in this document you need have an environment where the following packages are installed:\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: false\n",
        "#| warning: false\n",
        "using Pkg\n",
        "Pkg.activate(\".\")   # activating current dir\n",
        "```\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "#| code-fold: false\n",
        "# you need to have those packages installed.\n",
        "using CairoMakie\n",
        "using Random\n",
        "using LaTeXStrings\n",
        "using OrderedCollections   # for OrderedDict\n",
        "using FastGaussQuadrature  # for intergration rules\n",
        "using DataFrames           # to display a table\n",
        "using Sobol                # to get sobol sequences\n",
        "set_theme!()  # resetting all quarto default values for fig width etc\n",
        "```\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "#| warning: false\n",
        "x = 0:0.01:5\n",
        "f(x) = sin(x)^2 + 0.1x\n",
        "y = f.(x)\n",
        "fig = Figure(size = (800,600))\n",
        "ax = Axis(fig[1,1], xlabel = L\"x\", ylabel = L\"\\sin(x)^2 + 0.1 x\")\n",
        "lines!(ax, x, y, label = L\"f\", color = :black, linewidth = 2)\n",
        "band!(ax, x, fill(0,length(x)), y, color = (:red, 0.5), label = \"Integral\")\n",
        "axislegend(; merge = true, position = :lt)\n",
        "\n",
        "fig\n",
        "```\n",
        "\n",
        "\n",
        "As with [Riemann Integrals](https://en.wikipedia.org/wiki/Riemann_integral) where we split the continuous domain of $f$ into smaller and smaller chunks, which we then sum up ($\\int$), the numerical counterpart does the same: measure the value of `f` (the _height_ of the black line) at different points, and sum over them. The main question is: \n",
        "\n",
        "**At which points?**\n",
        "\n",
        "\n",
        "## Monte Carlo Integration\n",
        "\n",
        "A very intuitive first solution is to draw `N` _random_ points from the domain of `f`, evalute the function there, and compute their average. We would approximate $I$ as follows, where $x_i \\in \\Omega$ is a randomly chosen point from the function's domain:\n",
        "\n",
        "$$\\begin{equation}\n",
        "I \\approx Q_N \\equiv V \\frac{1}{N} \\sum_{i=1}^N f(x_i) = V \\bar{f}\n",
        "\\end{equation}$$\n",
        "\n",
        "This works because the law of large numbers tells us that\n",
        "\n",
        "$$\\begin{equation}\n",
        "\\lim_{N \\to \\infty} Q_N  = I.\n",
        "\\end{equation}$$\n",
        "\n",
        "The uncertainty from this method is easily quantifiable by the resulting variation in our estimate:\n",
        "\n",
        "$$\\begin{equation}\n",
        "Var(f) = \\sigma_N^2 = \\frac{1}{N-1} \\sum_{i=1}^N (f(x_i) -  \\bar{f})^2\n",
        "\\end{equation}$$\n",
        "\n",
        "from which we get the variance of $Q_N$ as $Var(Q_N) = V^2 \\frac{\\sigma_N^2}{N}$. Hence,clearly visible that this decreases as $N$ increases. We usually report the standard error of the estimator, so we report\n",
        "\n",
        "$$\\begin{equation}\n",
        "\\sigma_Q \\equiv \\sqrt{Var(Q_N)} = V \\frac{\\sigma_N}{\\sqrt{N}}\n",
        "\\end{equation}$$\n",
        "\n",
        "\n",
        "👍\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "# Compute $\\sigma_Q$!\n",
        "\n",
        "\n",
        "Write a function that takes $f$ from above, and computes standard error $\\sigma_Q$ for $N$ points. Your function should take arguments `sample_points`, which is a vector of evaluation points, and `fun`, which is a function to evaluate.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "function σ(sample_points,fun)\n",
        "    N = length(sample_points)\n",
        "    ys = fun.(sample_points)\n",
        "    ybar = sum(ys) / N  # mean\n",
        "    var = 1 / (N-1) * sum( (ys .- ybar) .^ 2 )\n",
        "    sqrt(var)\n",
        "end\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "# Compute the monte carlo integral and it's error!\n",
        "\n",
        "\n",
        "Write a function `mc_integrate` that takes $f$ from above, and computes both the monte carlo integration $Q_N$ as well as its standard error $\\sigma_Q$ for a set of $N$ **randomly chosen** points. Your function should take arguments `N`, which is a vector of evaluation points, and `fun`, which is a function to evaluate. Set a random seed to ensure reproducibility. Then, call your function to compute $Q$ for $N \\in \\{2,4,10,20,50,100,1000,10000\\}$ and compare the outputs. Produce an `OrderedDict` where the keys are those values for $N$.\n",
        ":::\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "function mc_integrate(N,fun)\n",
        "    Random.seed!(0)   # any number works\n",
        "    V = 5 # integrate dx from 0 to 5\n",
        "    pts = rand(N) .* V  # N random numbers in [0,5]\n",
        "    mc_integral = V / N * sum( fun.(pts) )\n",
        "    mc_error = V * σ(pts,fun) / sqrt(N)\n",
        "    mc_integral, mc_error\n",
        "end\n",
        "\n",
        "ns = [2,4,10,20,50,100,1000,10000]\n",
        "\n",
        "mc_results = OrderedDict(k =>\n",
        "    mc_integrate(k,f) for k in ns);\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "# Now make a plot!\n",
        "\n",
        "Taking the dict from the above question, write a function that makes a line plot with $N$ on the x axis and your estimate of the integral on the axis. Also add the error bars with `band!` function! Your function should take the output `OrderedDict` from above as argument. Scale the x-axis as log10.\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "#| warning: false\n",
        "function plot_mc(od::OrderedDict; errors = true)\n",
        "    x = collect(keys(od))\n",
        "    v = collect(values(od))\n",
        "    Q = [i[1] for i in v]\n",
        "    E = [i[2] for i in v]\n",
        "\n",
        "    fig = Figure(size = (800,600))\n",
        "    ax = Axis(fig[1,1], xlabel = \"N\", ylabel = \"Qn\", xscale = log10)\n",
        "    lines!(ax, x, Q, label = L\"Q_n\", color = :black, linewidth = 1)\n",
        "    scatter!(ax, x, Q, label = L\"Q_n\", color = :black, markersize = 15)\n",
        "    if errors errorbars!(ax, x, Q, E; wiskerwidth = 1, color = (:red)) end\n",
        "    axislegend(; merge = true, position = :rb, unique = true)\n",
        "\n",
        "    return fig\n",
        "end\n",
        "\n",
        "plot_mc(mc_results)\n",
        "```\n",
        "\n",
        "\n",
        "The last point, for $N=10000$ is what we'll consider as the true value. You can see, it takes us quite long until the monte carlo method converges to that value. So, that's the main drawback of this method.\n",
        "\n",
        "## Quasi-Monte carlo\n",
        "\n",
        "That's a version where we do not choose random numbers as evaluation points, but _sub-random sequences_ or _low discrepancy sequences_ of random numbers, which aim at variance reduction. Everything else is the same. \n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-tip}\n",
        "\n",
        "# Modify your `mc_integrate` for Quasi-MC\n",
        "\n",
        "Modify your function from above so that instead of `rand` it chooses numbers from the Sobol sequences. Then make the plot again.\n",
        ":::\n",
        "\n",
        "::: {.callout-note}\n",
        "\n",
        "# Using `Sobol.jl`\n",
        "\n",
        "1. make a constructor: `s = SobolSeq(lb,ub)` where `ub,lb` are _vectors_ of upper and lower bounds\n",
        "2. get n sobol-random numbers into a vector with `reduce(vcat, next!(s) for i in 1:n)`\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "function qmc_integrate(N,fun)\n",
        "    Random.seed!(0)   # any number works\n",
        "    V = 5 # integrate dx from 0 to 5\n",
        "\n",
        "    s = SobolSeq([0], [5])\n",
        "    pts = reduce(vcat, next!(s) for i in 1:N)\n",
        "    mc_integral = V / N * sum( fun.(pts) )\n",
        "    mc_error = V * σ(pts,fun) / sqrt(N)\n",
        "    mc_integral, mc_error\n",
        "end\n",
        "\n",
        "qmc_results = OrderedDict(k =>\n",
        "    qmc_integrate(k,f) for k in ns);\n",
        "```\n",
        "\n",
        "```{julia}\n",
        "plot_mc(qmc_results, errors = false)\n",
        "```\n",
        "\n",
        "\n",
        "One of the merits of quasi monte carlo integration is that it's rate of convergence is faster. You see that here various integrations stabilize at the \"true\" value (where $N=1000$) earlier than before. Notice I removed the error bars from the plot because I the previous formula is no longer correct. However it's good to know that the relationship between QMC and MC errors is \n",
        "\n",
        "$$\n",
        "O\\left(\\frac{(\\log N)^s}{N} \\right) \\quad vs \\quad O\\left( \\frac{1}{\\sqrt{N}} \\right)\n",
        "$$\n",
        "\n",
        "therefore, for QMC to do better than MC, we need $s$ small and $N$ large. In other words, in high-dimensional settings (high $s$), you might actually do better with straight MC.\n",
        "\n",
        "## Gaussian Quadrature integration\n",
        "\n",
        "Based on an early contribution of Carl Friedrich Gauss, we have that an $n$-point quadrature rule will yield an _exact_ integration result to functions that look like polynomials of degree $2n -1$, or less, by choosing $n$ suitable **nodes** $x_i$ and **weights** $w_i$. That is quite the result. The [wikipedia entry](https://en.wikipedia.org/wiki/Gaussian_quadrature) is very interesting. Basically, we will now concentrate on how to do better than in monte carlo integration, where each point gets the same weight $1/N$, and where our only hope is to generate a very large set of sample points, which may be costly.\n",
        "\n",
        "\n",
        "\n",
        "We continue in the above framework, i.e. in order to compute the expected value of a function $G$, say, we do the following:\n",
        "\n",
        "$$\n",
        "E[G(\\epsilon)] = \\int_{\\mathbb{R}^N} G(\\epsilon) p(\\epsilon) d\\epsilon \\approx \\sum_{j=1}^J w_j G(\\epsilon_j)\n",
        "$$\n",
        "\n",
        "We have some explanation to do:\n",
        "\n",
        "* $N$ is the dimensionality of the integration problem.\n",
        "* $G:\\mathbb{R}^N \\mapsto \\mathbb{R}$ is the function we want to integrate wrt $\\epsilon \\in \\mathbb{R}^N$.\n",
        "* $p$ is a density function s.t. $\\int_{\\mathbb{R}^n} p(\\epsilon) d\\epsilon = 1$.\n",
        "* $w$ are integration weights such that (most of the time) $\\sum_{j=1}^J w_j = 1$.\n",
        "* $\\epsilon_j$ are integration *nodes*, i.e. the points where we choose to evaluate function $G$. Notice that nodes and weights come in pairs.\n",
        "* We will look at normal shocks $\\epsilon \\sim N(0_N,I_N)$\n",
        "* in that case, the weighting function becomes $w(\\epsilon) = (2\\pi)^{-N/2} \\exp \\left(-\\frac{1}{2}\\epsilon^T \\epsilon \\right)$\n",
        "* $I_N$ is the n by n identity matrix, i.e. there is no correlation among the shocks for now.\n",
        "* Other random processes will require different weighting functions, but the principle is identical.\n",
        "* For now, let's say that $N=1$\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### Different Quadrature Rules\n",
        "\n",
        "* We focus exclusively on those and leave Simpson and Newton Cowtes formulas out.\n",
        "\t* This is because Quadrature is the method that in many situations gives highes accuracy with lowest computational cost.\n",
        "* Quadrature provides a rule to compute weights $w_j$ and nodes $\\epsilon_j$.\n",
        "* There are many different quadrature rules.\n",
        "* They differ in their domain and weighting function.\n",
        "* [wikipedia](https://en.wikipedia.org/wiki/Gaussian_quadrature#Other_forms) again has a useful table for us.\n",
        "* In general, we can convert our function domain to a rule-specific domain with change of variables.\n",
        "\n",
        "\n",
        "### Gauss-Hermite: Expectation of a Normally Distributed Variable\n",
        "\n",
        "* There are many different rules, all specific to a certain random process.\n",
        "* Gauss-Hermite is designed for an integral of the form\n",
        "\t$$ \\int_{-\\infty}^{+\\infty} e^{-x^2} G(x) dx $$\n",
        "\tand where we would approximate \n",
        "\t$$ \\int_{-\\infty}^{+\\infty} e^{-x^2} f(x) dx \\approx \\sum_{i=1}^n w_i G(x_i) $$\n",
        "* Now, let's say we want to approximate the expected value of function $f$ when it's argument is $z\\sim N(\\mu,\\sigma^2)$:\n",
        "\t$$ E[f(z)] = \\int_{-\\infty}^{+\\infty} \\frac{1}{\\sigma \\sqrt{2\\pi}} \\exp \\left( -\\frac{(z-\\mu)^2}{2\\sigma^2} \\right) f(z) dz $$\n",
        "\n",
        "### Gauss-Quadrature with $N>1$?\n",
        "\n",
        "Easy: we just take the kronecker product of all univariate rules, i.e. the kronecker product amongst all weights and all nodes. Let's look at an example.\n",
        "\n",
        "* This works well as long as $N$ is not too large. The number of required function evaluations grows exponentially.\n",
        "\t$$ E[G(\\epsilon)] = \\int_{\\mathbb{R}^N} G(\\epsilon) p(\\epsilon) d\\epsilon \\approx \\sum_{j_1=1}^{J_1} \\cdots \\sum_{j_N=1}^{J_N} w_{j_1}^1 \\cdots w_{j_N}^N G(\\epsilon_{j_1}^1,\\dots,\\epsilon_{j_N}^N) $$\n",
        "\twhere $\\omega_{j_1}^1$ stands for weight index $j_1$ in dimension 1, same for $\\epsilon$.\n",
        "* Total number of nodes: $J=J_1 J_2 \\cdots J_N$, and $J_i$ can differ from $J_k$.\n",
        "* Suppose we have $\\epsilon^i \\sim N(0,1),i=1,2,3$ as three uncorrelated random variables.\n",
        "* Let's take $J=3$ points in all dimensions, so that in total we have $J^N=27$ points.\n",
        "\n",
        "## Quadrature with julia\n",
        "\n",
        "\n",
        "```{julia}\n",
        "#| echo: true\n",
        "#| code-fold: false\n",
        "np = 3  # number of points\n",
        "\n",
        "# functions from FastGaussQuadrature.jl\n",
        "rules = Dict(\"hermite\" => gausshermite(np),\n",
        "             \"chebyshev\" => gausschebyshev(np),\n",
        "             \"legendre\" => gausslegendre(np),\n",
        "             \"lobatto\" => gausslobatto(np));\n",
        "```\n",
        "\n",
        "\n",
        "Here are the respective nodes and weights for each of those four rules:\n",
        "\n",
        "\n",
        "```{julia}\n",
        "integ = DataFrame(Rule=Symbol[Symbol(x) for x in keys(rules)],nodes=[x[1] for x in values(rules)],weights=[x[2] for x in values(rules)])\n",
        "```\n",
        "\n",
        "\n",
        "### Approximating an AR1 process\n",
        "\n",
        "http://karenkopecky.net/Rouwenhorst_WP.pdf\n"
      ],
      "id": "9220e4e4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}